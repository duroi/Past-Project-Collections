Project 3

1. Overview

- Implement strongly connected component detection in a directed graph (digraph)
	- represent the graph as an adjaceny matrix
	- always choose the vertex with the lowest id whyen given a choice

- A SCC in in a digraph is a maximal set of vetices so that every vetex in the set is connected to every other vertex

- In order for vertices u and v to be in the same SCC, there must be directed paths from u to v and from v to u

- The algorithim for finding the SCC in a digraph is based on a two-pass DFS algorithm 

- Preliminary header file and driver file provided, header file can be modified as desired, must work with driver file. The preliminary header is not sufficient to solve the problem and must be added to.

- Must implement the graph using an adjacency matrix. Can use the implementation used in class.


2. How to comput streongly connecnet components in a digraph

- Calculates the SCCs of a diagraph in two DFS passes. 
	- First pass: add the vertices of the graph to a stack as you explore them.
		- When iterating through the neighbors of a vertex v in a digraph, you should iterate through the outgoing neighors of v. The vertices that have an edge pointing to them from v.
	- Second pass: the second pass uses the in neighbors, the vertices with incoming edges of a vertex. 	
		- Initialize each vertex to be undiscovered as normal, but instead of iteratively selected the undisovered vertex with the lowest ID, perform the recursive DFS Aon the first undiscovered vertex in the stack. The outer loop of the second pass iterates in stack order rather than sorted order.
		- Each iteration of the loop represents a different SCC. 
		- Assign the same  component ID to all the vertices encountered in the recursive function.
			- Start at 0, component 0 should be the SCC containing the last vertex explored in the first DFS. Count upwards 
			- The recursive function processes the incoming neighbors rather than the outgoing neighbors

3. Algorithim Output

- the "stronglyConnectedComponents" function you will implement must return a vector containing an array-based (vector-based) map that associates each vertex in the graph with its component ID.

-Component IDs should start numbering at 0. ie the component that contains the last vertex explored during the first pass should have the ID 0. And count upward from there.

- In the first DFGS pass, you shoudl always choose the vertex with the min ID when given a choice. ie you must iterate through the neighors of a vertex in sorted order, and must start your DFS each iteration at th eundiscovered vertex with the min ID. 

- It should not matter which order you iterate through the neigthbors of each vertex in the second pass. As long as the outer loop iterates through the vertices in stack order. 

- Each input graph should have only a signle correct solution for its SCC IDs.


4. Ex 1 (sample 1)


5. Ex 2 (sample 2)


6. Input file

- The input graph is described in edge list format
- Line 1 has the number of vertices, and edges of the graph seperated by a space (n and m)

- The following m lines have two nonnegative integers each (u and v). These integers will be in the range 0 to n-1 and represent the number of edpoints of a directed edge in a graph. Specifically they represent the edge from u to v.

- In a diagraph the edge from u to v and the edge from v to u are seperate.

7. Submitted code

- Submit a zip archive containing two files: digraph.h and digraph.cpp which define and implement a DigraphMatrix class.

- The class must have a constructor that accepts a string (or const string&), and it must have a function stronglyConnectedComponents that accepts no parameters and returns a vector containing the component ID for each vertex in the graph. 
- The constructor must be able to construct the graph based on the name of an input file to read. 
- It must represent the corresponding graph using an adjacency matrix and it must be compatible with the provided driver file.


sample 1
http://graphonline.ru/en/?graph=lmziwAnwlWaORCGL

First Pass:
(Discover 0, Discover 1, Discover 2, Discover 5, Discover 4, Explore 4, Discover 6, Discover 7,
Explore 7, Explore 6, Explore 5, Explore 2, Discover 3, Explore 3, Explore 1, Explore 0.) Thus,
the stack contains (top-to-bottom) 0, 1, 3, 2, 5, 6, 7, 4 after the first pass.

Second Pass: 
The final component vector for this graph should contain [0, 0, 1, 0, 1, 1, 1, 2].

sample 2
http://graphonline.ru/en/?graph=lmziwAnwlWaORCGL

First Pass:
Our exploration order was 3, 0, 2, 4, 1, 5, so our stack contains (top-to-bottom): 5, 1,
4, 2, 0, 3.

Second Pass:  

The final component vector should contain [2, 1, 1, 3, 1, 0].


Psuedocode

Open input file; //Each line has two words
Read first word into variable n; //n is the number of verticies
Read second word into varialbe m; //m is the number of edges.
Create 2D array of size n, arr[n][n]; //This array will be the adjacency matrix. Could be a bool array initilized to false, or an int array initialized to 0.

For loop; //Use the number of edges to control the loop.  
    Read word from file into variable u; //u is the first vertex in the edge
    Read word from file into variable v; //v is the second vertex in the edge
    Set arr[u][v] = 1 or true; //this represents that the two veticies are adjacent. And that it is directed from u to v.
end loop;

